# -*- coding: utf-8 -*-
"""red convolutiva.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUulwd-x-vSJikvR6niPfgwZAsJUCvKb
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/Colab Notebooks/datasets"

from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image

print("RED NEURONAL PARA DISTINGUIR ENTRE PERROS Y GATOS")
# %matplotlib inline
pil_im = Image.open('/content/drive/My Drive/Colab Notebooks/datasets/dogs_and_cats/dogs/yo5.jpg', 'r')
imshow(np.asarray(pil_im))

import tensorflow as tf
tf.test.gpu_device_name()

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.models import load_model
import cv2
from keras.layers import Dense, Dropout
from keras.optimizers import RMSprop
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import keras
from time import time


# DATA SOURCE --------------------------------------------------

batch_size = 20

train_data_dir = '/content/drive/My Drive/Colab Notebooks/datasets/dogs_and_cats/train'
validation_data_dir = '/content/drive/My Drive/Colab Notebooks/datasets/dogs_and_cats/validation'

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='binary')

# MODEL --------------------------------------------------

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=(150, 150, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
#model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
#model.add(Dense(2, activation='softmax'))
predictions=Dense(1, activation='sigmoid')
model.add(predictions)


model.compile(loss=keras.losses.binary_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])



  
  
print(model.summary)
# TRAINING --------------------------------------------------
print ("-x-x-x-x-x-x-x-x")
print ("Entrenando...")
print ("-x-x-x-x-x-x-x-x")
epochs = 10
history=model.fit_generator(
        train_generator,
        steps_per_epoch=100,
        epochs=epochs, 
        validation_data=validation_generator,
        validation_steps=800,
)
model.save('model.h5')

import matplotlib.pyplot as plt
print(history.history.keys())
# Cantidad de aprendizaje
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('GRÁFICA VISUAL DEL ENTRENAMIENTO')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# Cantidad de error
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Pérdida')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image

# %matplotlib inline
pil_im = Image.open('/content/drive/My Drive/Colab Notebooks/datasets/dogs_and_cats/cats/ga1.jpg', 'r')
imshow(np.asarray(pil_im))

tuimagen = np.resize(np.asarray(pil_im), (150,150,3))

tuimagen = tuimagen.reshape(-1,150,150,3)

print(tuimagen.shape)

preds = model.predict(tuimagen)

print(preds)
if(preds>0.5): print ('SE HA DETECTADO: PERRO')
if(preds<0.5): print ('SE HA DETECTADO: GATO')